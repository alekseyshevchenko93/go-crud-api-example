// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/alekseyshevchenko93/go-crud-api-example/domain/requests"
	mock "github.com/stretchr/testify/mock"

	models "github.com/alekseyshevchenko93/go-crud-api-example/domain/models"
)

// PortfolioRepository is an autogenerated mock type for the PortfolioRepository type
type PortfolioRepository struct {
	mock.Mock
}

type PortfolioRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *PortfolioRepository) EXPECT() *PortfolioRepository_Expecter {
	return &PortfolioRepository_Expecter{mock: &_m.Mock}
}

// CreatePortfolio provides a mock function with given fields: _a0
func (_m *PortfolioRepository) CreatePortfolio(_a0 domain.CreatePortfolioRequest) (models.Portfolio, error) {
	ret := _m.Called(_a0)

	var r0 models.Portfolio
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.CreatePortfolioRequest) (models.Portfolio, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(domain.CreatePortfolioRequest) models.Portfolio); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(models.Portfolio)
	}

	if rf, ok := ret.Get(1).(func(domain.CreatePortfolioRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PortfolioRepository_CreatePortfolio_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePortfolio'
type PortfolioRepository_CreatePortfolio_Call struct {
	*mock.Call
}

// CreatePortfolio is a helper method to define mock.On call
//   - _a0 domain.CreatePortfolioRequest
func (_e *PortfolioRepository_Expecter) CreatePortfolio(_a0 interface{}) *PortfolioRepository_CreatePortfolio_Call {
	return &PortfolioRepository_CreatePortfolio_Call{Call: _e.mock.On("CreatePortfolio", _a0)}
}

func (_c *PortfolioRepository_CreatePortfolio_Call) Run(run func(_a0 domain.CreatePortfolioRequest)) *PortfolioRepository_CreatePortfolio_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.CreatePortfolioRequest))
	})
	return _c
}

func (_c *PortfolioRepository_CreatePortfolio_Call) Return(_a0 models.Portfolio, _a1 error) *PortfolioRepository_CreatePortfolio_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PortfolioRepository_CreatePortfolio_Call) RunAndReturn(run func(domain.CreatePortfolioRequest) (models.Portfolio, error)) *PortfolioRepository_CreatePortfolio_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePortfolio provides a mock function with given fields: _a0
func (_m *PortfolioRepository) DeletePortfolio(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PortfolioRepository_DeletePortfolio_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePortfolio'
type PortfolioRepository_DeletePortfolio_Call struct {
	*mock.Call
}

// DeletePortfolio is a helper method to define mock.On call
//   - _a0 string
func (_e *PortfolioRepository_Expecter) DeletePortfolio(_a0 interface{}) *PortfolioRepository_DeletePortfolio_Call {
	return &PortfolioRepository_DeletePortfolio_Call{Call: _e.mock.On("DeletePortfolio", _a0)}
}

func (_c *PortfolioRepository_DeletePortfolio_Call) Run(run func(_a0 string)) *PortfolioRepository_DeletePortfolio_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *PortfolioRepository_DeletePortfolio_Call) Return(_a0 error) *PortfolioRepository_DeletePortfolio_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PortfolioRepository_DeletePortfolio_Call) RunAndReturn(run func(string) error) *PortfolioRepository_DeletePortfolio_Call {
	_c.Call.Return(run)
	return _c
}

// GetPortfolioById provides a mock function with given fields: _a0
func (_m *PortfolioRepository) GetPortfolioById(_a0 string) (models.Portfolio, error) {
	ret := _m.Called(_a0)

	var r0 models.Portfolio
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.Portfolio, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) models.Portfolio); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(models.Portfolio)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PortfolioRepository_GetPortfolioById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPortfolioById'
type PortfolioRepository_GetPortfolioById_Call struct {
	*mock.Call
}

// GetPortfolioById is a helper method to define mock.On call
//   - _a0 string
func (_e *PortfolioRepository_Expecter) GetPortfolioById(_a0 interface{}) *PortfolioRepository_GetPortfolioById_Call {
	return &PortfolioRepository_GetPortfolioById_Call{Call: _e.mock.On("GetPortfolioById", _a0)}
}

func (_c *PortfolioRepository_GetPortfolioById_Call) Run(run func(_a0 string)) *PortfolioRepository_GetPortfolioById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *PortfolioRepository_GetPortfolioById_Call) Return(_a0 models.Portfolio, _a1 error) *PortfolioRepository_GetPortfolioById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PortfolioRepository_GetPortfolioById_Call) RunAndReturn(run func(string) (models.Portfolio, error)) *PortfolioRepository_GetPortfolioById_Call {
	_c.Call.Return(run)
	return _c
}

// GetPortfolios provides a mock function with given fields:
func (_m *PortfolioRepository) GetPortfolios() ([]models.Portfolio, error) {
	ret := _m.Called()

	var r0 []models.Portfolio
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Portfolio, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Portfolio); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Portfolio)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PortfolioRepository_GetPortfolios_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPortfolios'
type PortfolioRepository_GetPortfolios_Call struct {
	*mock.Call
}

// GetPortfolios is a helper method to define mock.On call
func (_e *PortfolioRepository_Expecter) GetPortfolios() *PortfolioRepository_GetPortfolios_Call {
	return &PortfolioRepository_GetPortfolios_Call{Call: _e.mock.On("GetPortfolios")}
}

func (_c *PortfolioRepository_GetPortfolios_Call) Run(run func()) *PortfolioRepository_GetPortfolios_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PortfolioRepository_GetPortfolios_Call) Return(_a0 []models.Portfolio, _a1 error) *PortfolioRepository_GetPortfolios_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PortfolioRepository_GetPortfolios_Call) RunAndReturn(run func() ([]models.Portfolio, error)) *PortfolioRepository_GetPortfolios_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePortfolio provides a mock function with given fields: _a0
func (_m *PortfolioRepository) UpdatePortfolio(_a0 models.Portfolio) (models.Portfolio, error) {
	ret := _m.Called(_a0)

	var r0 models.Portfolio
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Portfolio) (models.Portfolio, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(models.Portfolio) models.Portfolio); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(models.Portfolio)
	}

	if rf, ok := ret.Get(1).(func(models.Portfolio) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PortfolioRepository_UpdatePortfolio_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePortfolio'
type PortfolioRepository_UpdatePortfolio_Call struct {
	*mock.Call
}

// UpdatePortfolio is a helper method to define mock.On call
//   - _a0 models.Portfolio
func (_e *PortfolioRepository_Expecter) UpdatePortfolio(_a0 interface{}) *PortfolioRepository_UpdatePortfolio_Call {
	return &PortfolioRepository_UpdatePortfolio_Call{Call: _e.mock.On("UpdatePortfolio", _a0)}
}

func (_c *PortfolioRepository_UpdatePortfolio_Call) Run(run func(_a0 models.Portfolio)) *PortfolioRepository_UpdatePortfolio_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Portfolio))
	})
	return _c
}

func (_c *PortfolioRepository_UpdatePortfolio_Call) Return(_a0 models.Portfolio, _a1 error) *PortfolioRepository_UpdatePortfolio_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PortfolioRepository_UpdatePortfolio_Call) RunAndReturn(run func(models.Portfolio) (models.Portfolio, error)) *PortfolioRepository_UpdatePortfolio_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewPortfolioRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewPortfolioRepository creates a new instance of PortfolioRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPortfolioRepository(t mockConstructorTestingTNewPortfolioRepository) *PortfolioRepository {
	mock := &PortfolioRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
